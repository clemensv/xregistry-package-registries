name: Deploy Integration Environment

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Container image tag to deploy'
        required: false
        default: 'latest'
        type: string
      branch_ref:
        description: 'Branch/ref to deploy from (NOT main)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Validate branch
      run: |
        if [ "${{ inputs.branch_ref }}" = "main" ]; then
          echo "❌ ERROR: Integration deployment cannot be run from main branch"
          echo "Please create a feature branch with your changes and deploy from there"
          exit 1
        fi
        echo "✅ Deploying from branch: ${{ inputs.branch_ref }}"

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch_ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push bridge image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: bridge.Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-bridge:${{ inputs.image_tag || 'latest' }}
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-bridge:int-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push npm image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: npm.Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-npm-bridge:${{ inputs.image_tag || 'latest' }}
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-npm-bridge:int-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push pypi image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: pypi.Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-pypi-bridge:${{ inputs.image_tag || 'latest' }}
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-pypi-bridge:int-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push maven image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: maven.Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-maven-bridge:${{ inputs.image_tag || 'latest' }}
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-maven-bridge:int-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push nuget image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: nuget.Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-nuget-bridge:${{ inputs.image_tag || 'latest' }}
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-nuget-bridge:int-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push oci image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: oci.Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-oci-bridge:${{ inputs.image_tag || 'latest' }}
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/xregistry-oci-bridge:int-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Integration Environment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        IMAGE_TAG: ${{ inputs.image_tag || 'latest' }}
      run: |
        chmod +x deploy/deploy-integration.sh
        deploy/deploy-integration.sh

    - name: Verify Integration Deployment
      run: |
        echo "✅ Integration deployment completed!"
        echo "Container App: xreg-pkg-int"
        echo "Expected URL: https://xreg-pkg-int.westeurope.azurecontainerapps.io"
        
        # Wait for app to be ready
        sleep 30
        
        # Check if the app is responding
        if curl -f --max-time 30 https://xreg-pkg-int.westeurope.azurecontainerapps.io/health 2>/dev/null; then
          echo "✅ Integration environment is responding to health checks"
        else
          echo "⚠️ Integration environment may not be fully ready yet"
        fi 