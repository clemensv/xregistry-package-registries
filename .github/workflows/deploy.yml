name: Build & Deploy xRegistry to Azure Container Apps

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'bridge/**'
      - 'npm/**'
      - 'pypi/**'
      - 'maven/**'
      - 'nuget/**'
      - 'oci/**'
      - 'docker-compose.yml'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'
  workflow_run:
    workflows: ["Build NPM xRegistry", "Build PyPI xRegistry", "Build Maven xRegistry", "Build NuGet xRegistry", "Build OCI xRegistry", "Build Bridge xRegistry"]
    types: [completed]
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to Azure Container Apps'
        required: false
        default: true
        type: boolean
      resource_group:
        description: 'Azure Resource Group'
        required: false
        default: 'xregistry-package-registries'
        type: string
      location:
        description: 'Azure Region'
        required: false
        default: 'westeurope'
        type: string
      env_name:
        description: 'Container App Environment Name'
        required: false
        default: 'xregistry-package-registries'
        type: string
      app_name:
        description: 'Container App Name (all services)'
        required: false
        default: 'xregistry-package-registries'
        type: string

env:
    REGISTRY: ghcr.io
    PYPI_IMAGE_NAME: ${{ github.repository }}/xregistry-pypi-bridge
    OCI_IMAGE_NAME: ${{ github.repository }}/xregistry-oci-bridge
    NPM_IMAGE_NAME: ${{ github.repository }}/xregistry-npm-bridge
    MAVEN_IMAGE_NAME: ${{ github.repository }}/xregistry-maven-bridge
    NUGET_IMAGE_NAME: ${{ github.repository }}/xregistry-nuget-bridge
    BRIDGE_IMAGE_NAME: ${{ github.repository }}/xregistry-bridge

jobs:
  
  build-pypi:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build-pypi.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - uses: sigstore/cosign-installer@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PYPI_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=ref,event=branch
            type=ref,event=pr
      - id: build-pypi
        uses: docker/build-push-action@v5
        with:
          context: ./pypi
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          provenance: mode=max
      - name: Sign image (OIDC)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_YES: "true"
        run: |
          REF="${{ env.REGISTRY }}/${{ env.PYPI_IMAGE_NAME }}@${{ steps.build-pypi.outputs.digest }}"
          cosign sign "${REF}"
# ──────────────────────────────────────────────────────── verify ─────
  verify-pypi:
    needs: build-pypi
    runs-on: ubuntu-latest
    permissions:
      packages: read
      id-token: write

    steps:
      - uses: sigstore/cosign-installer@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify signature
        run: |
          REF="${{ env.REGISTRY }}/${{ env.PYPI_IMAGE_NAME }}@${{ needs.build-pypi.outputs.digest }}"
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity "https://github.com/${{ github.workflow_ref }}" \
            "${REF}" 

  build-npm:
    needs: build-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build-npm.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - uses: sigstore/cosign-installer@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NPM_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=ref,event=branch
            type=ref,event=pr
      - id: build-npm
        uses: docker/build-push-action@v5
        with:
          context: ./npm
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          provenance: mode=max

      - name: Sign image (OIDC)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_YES: "true"
        run: |
          REF="${{ env.REGISTRY }}/${{ env.NPM_IMAGE_NAME }}@${{ steps.build-npm.outputs.digest }}"
          cosign sign "${REF}"
# ──────────────────────────────────────────────────────── verify ─────
  verify-npm:
    needs: build-npm
    runs-on: ubuntu-latest
    permissions:
      packages: read
      id-token: write

    steps:
      - uses: sigstore/cosign-installer@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify signature
        run: |
          REF="${{ env.REGISTRY }}/${{ env.NPM_IMAGE_NAME }}@${{ needs.build-npm.outputs.digest }}"
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity "https://github.com/${{ github.workflow_ref }}" \
            "${REF}"     
  
  build-oci:
    needs: build-npm
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build-oci.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - uses: sigstore/cosign-installer@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OCI_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=ref,event=branch
            type=ref,event=pr
      - id: build-oci
        uses: docker/build-push-action@v5
        with:
          context: ./oci
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          provenance: mode=max

      - name: Sign image (OIDC)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_YES: "true"
        run: |
          REF="${{ env.REGISTRY }}/${{ env.OCI_IMAGE_NAME }}@${{ steps.build-oci.outputs.digest }}"
          cosign sign "${REF}"
# ──────────────────────────────────────────────────────── verify ─────
  verify-oci:
    needs: build-oci
    runs-on: ubuntu-latest
    permissions:
      packages: read
      id-token: write

    steps:
      - uses: sigstore/cosign-installer@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify signature
        run: |
          REF="${{ env.REGISTRY }}/${{ env.OCI_IMAGE_NAME }}@${{ needs.build-oci.outputs.digest }}"
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity "https://github.com/${{ github.workflow_ref }}" \
            "${REF}" 
  
  build-nuget:
    needs: build-oci
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build-nuget.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - uses: sigstore/cosign-installer@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NUGET_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=ref,event=branch
            type=ref,event=pr
      - id: build-nuget
        uses: docker/build-push-action@v5
        with:
          context: ./nuget
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          provenance: mode=max

      - name: Sign image (OIDC)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_YES: "true"
        run: |
          REF="${{ env.REGISTRY }}/${{ env.NUGET_IMAGE_NAME }}@${{ steps.build-nuget.outputs.digest }}"
          cosign sign "${REF}"
# ──────────────────────────────────────────────────────── verify ─────
  verify-nuget:
    needs: build-nuget
    runs-on: ubuntu-latest
    permissions:
      packages: read
      id-token: write

    steps:
      - uses: sigstore/cosign-installer@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify signature
        run: |
          REF="${{ env.REGISTRY }}/${{ env.NUGET_IMAGE_NAME }}@${{ needs.build-nuget.outputs.digest }}"
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity "https://github.com/${{ github.workflow_ref }}" \
            "${REF}"           


  build-maven:
    needs: build-nuget
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build-maven.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - uses: sigstore/cosign-installer@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.MAVEN_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=ref,event=branch
            type=ref,event=pr
      - id: build-maven
        uses: docker/build-push-action@v5
        with:
          context: ./maven
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          provenance: mode=max

      - name: Sign image (OIDC)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_YES: "true"
        run: |
          REF="${{ env.REGISTRY }}/${{ env.MAVEN_IMAGE_NAME }}@${{ steps.build-maven.outputs.digest }}"
          cosign sign "${REF}"
# ──────────────────────────────────────────────────────── verify ─────
  verify-maven:
    needs: build-maven
    runs-on: ubuntu-latest
    permissions:
      packages: read
      id-token: write

    steps:
      - uses: sigstore/cosign-installer@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify signature
        run: |
          REF="${{ env.REGISTRY }}/${{ env.MAVEN_IMAGE_NAME }}@${{ needs.build-maven.outputs.digest }}"
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity "https://github.com/${{ github.workflow_ref }}" \
            "${REF}"            
  
  build-bridge:
    needs: build-maven
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build-bridge.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - uses: sigstore/cosign-installer@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BRIDGE_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=ref,event=branch
            type=ref,event=pr
      - id: build-bridge
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./bridge/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          provenance: mode=max

      - name: Sign image (OIDC)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_YES: "true"
        run: |
          REF="${{ env.REGISTRY }}/${{ env.BRIDGE_IMAGE_NAME }}@${{ steps.build-bridge.outputs.digest }}"
          cosign sign "${REF}"
# ──────────────────────────────────────────────────────── verify ─────
  verify-bridge:
    needs: build-bridge
    runs-on: ubuntu-latest
    permissions:
      packages: read
      id-token: write

    steps:
      - uses: sigstore/cosign-installer@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify signature
        run: |
          REF="${{ env.REGISTRY }}/${{ env.BRIDGE_IMAGE_NAME }}@${{ needs.build-bridge.outputs.digest }}"
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity "https://github.com/${{ github.workflow_ref }}" \
            "${REF}" 

  deploy:
    needs: [verify-pypi, verify-npm, verify-oci, verify-nuget, verify-maven, verify-bridge]
    if: ${{ github.event.inputs.deploy == 'true' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write

    env:
      RESOURCE_GROUP: ${{ github.event.inputs.resource_group || 'xregistry-package-registries' }}
      LOCATION:       ${{ github.event.inputs.location       || 'westeurope' }}
      ENV_NAME:       ${{ github.event.inputs.env_name       || 'xregistry-package-registries' }}
      APP_NAME:       ${{ github.event.inputs.app_name       || 'xregistry-package-registries' }}
      


    steps:
      - uses: actions/checkout@v4

      - name: Check Azure Credentials
        run: |
          if [[ -z "${{ secrets.AZURE_CREDENTIALS }}" ]]; then
            echo "❌ AZURE_CREDENTIALS secret is not set!"
            echo ""
            echo "🔧 To set up Azure deployment credentials, run:"
            echo "   # Windows (PowerShell)"
            echo "   .\setup-deployment-secrets.ps1 -RepoOwner ${{ github.repository_owner }}"
            echo ""
            echo "   # Linux/macOS (Bash)"  
            echo "   ./setup-deployment-secrets.sh -o ${{ github.repository_owner }}"
            echo ""
            echo "📖 See ACTIONS.md for detailed setup instructions."
            exit 1
          fi
          echo "✅ Azure credentials are configured"

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Container Apps extension
        run: az extension add --name containerapp --yes

      - name: Determine image tag
        id: tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          fi

      - name: Ensure Resource Group
        run: |
          if ! az group show --name $RESOURCE_GROUP &>/dev/null; then
            echo "Creating resource group $RESOURCE_GROUP..."
            az group create --name $RESOURCE_GROUP --location $LOCATION
          fi

      - name: Ensure Container App Environment
        run: |
          if ! az containerapp env show --name $ENV_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            echo "Creating Container App environment $ENV_NAME..."
            az containerapp env create \
              --name $ENV_NAME \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION \
              --logs-destination none
          fi

      - name: Get Environment ID
        id: get-env-id
        run: |
          SUBSCRIPTION_ID=$(az account show --query id --output tsv)
          echo "subscription-id=$SUBSCRIPTION_ID" >> $GITHUB_OUTPUT
          echo "Subscription ID: $SUBSCRIPTION_ID"

      - name: Generate API Keys
        id: api-keys
        run: |
          # Generate unique API keys for each service
          NPM_API_KEY="npm-$(openssl rand -hex 16)"
          PYPI_API_KEY="pypi-$(openssl rand -hex 16)"
          MAVEN_API_KEY="maven-$(openssl rand -hex 16)"
          NUGET_API_KEY="nuget-$(openssl rand -hex 16)"
          OCI_API_KEY="oci-$(openssl rand -hex 16)"
          
          echo "NPM_API_KEY=$NPM_API_KEY" >> $GITHUB_ENV
          echo "PYPI_API_KEY=$PYPI_API_KEY" >> $GITHUB_ENV
          echo "MAVEN_API_KEY=$MAVEN_API_KEY" >> $GITHUB_ENV
          echo "NUGET_API_KEY=$NUGET_API_KEY" >> $GITHUB_ENV
          echo "OCI_API_KEY=$OCI_API_KEY" >> $GITHUB_ENV
          
          echo "✅ Generated unique API keys for all services"

      - name: Deploy xRegistry Container App (All Services)
        run: |
          # Run the deployment script with parameters
          chmod +x ./deploy/deploy.sh
          ./deploy/deploy.sh \
            --resource-group "$RESOURCE_GROUP" \
            --location "$LOCATION" \
            --environment "prod" \
            --image-tag "$IMAGE_TAG" \
            --repository "${{ github.repository }}" \
            --github-actor "${{ github.actor }}" \
            --github-token "${{ secrets.GITHUB_TOKEN }}" \
            --verbose

      - name: Summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "The deployment script has handled all setup, testing, and verification."
          echo "Check the script output above for service endpoints and status." 