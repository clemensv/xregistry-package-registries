name: Deploy xRegistry to Azure Container Apps

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  workflow_run:
    workflows: ["Build NPM xRegistry", "Build PyPI xRegistry", "Build Maven xRegistry", "Build NuGet xRegistry", "Build OCI xRegistry", "Build Bridge xRegistry"]
    types: [completed]
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to Azure Container Apps'
        required: false
        default: true
        type: boolean
      resource_group:
        description: 'Azure Resource Group'
        required: false
        default: 'xregistry-package-registries'
        type: string
      location:
        description: 'Azure Region'
        required: false
        default: 'westeurope'
        type: string
      env_name:
        description: 'Container App Environment Name'
        required: false
        default: 'xregistry-package-registries'
        type: string
      app_name:
        description: 'Container App Name (all services)'
        required: false
        default: 'xregistry-package-registries'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}/xregistry

jobs:
  deploy:
    if: ${{ github.event.inputs.deploy == 'true' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write

    env:
      RESOURCE_GROUP: ${{ github.event.inputs.resource_group || 'xregistry-resources' }}
      LOCATION:       ${{ github.event.inputs.location       || 'westeurope' }}
      ENV_NAME:       ${{ github.event.inputs.env_name       || 'xregistry-env' }}
      APP_NAME:       ${{ github.event.inputs.app_name       || 'xregistry-app' }}

    steps:
      - uses: actions/checkout@v4

      - name: Check Azure Credentials
        run: |
          if [[ -z "${{ secrets.AZURE_CREDENTIALS }}" ]]; then
            echo "❌ AZURE_CREDENTIALS secret is not set!"
            echo ""
            echo "🔧 To set up Azure deployment credentials, run:"
            echo "   # Windows (PowerShell)"
            echo "   .\setup-deployment-secrets.ps1 -RepoOwner ${{ github.repository_owner }}"
            echo ""
            echo "   # Linux/macOS (Bash)"  
            echo "   ./setup-deployment-secrets.sh -o ${{ github.repository_owner }}"
            echo ""
            echo "📖 See ACTIONS.md for detailed setup instructions."
            exit 1
          fi
          echo "✅ Azure credentials are configured"

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Container Apps extension
        run: az extension add --name containerapp --yes

      - name: Determine image tag
        id: tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          fi

      - name: Ensure Resource Group
        run: |
          if ! az group show --name $RESOURCE_GROUP &>/dev/null; then
            echo "Creating resource group $RESOURCE_GROUP..."
            az group create --name $RESOURCE_GROUP --location $LOCATION
          fi

      - name: Ensure Container App Environment
        run: |
          if ! az containerapp env show --name $ENV_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            echo "Creating Container App environment $ENV_NAME..."
            az containerapp env create \
              --name $ENV_NAME \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION \
              --logs-destination none
          fi

      - name: Generate API Keys
        id: api-keys
        run: |
          # Generate unique API keys for each service
          NPM_API_KEY="npm-$(openssl rand -hex 16)"
          PYPI_API_KEY="pypi-$(openssl rand -hex 16)"
          MAVEN_API_KEY="maven-$(openssl rand -hex 16)"
          NUGET_API_KEY="nuget-$(openssl rand -hex 16)"
          OCI_API_KEY="oci-$(openssl rand -hex 16)"
          
          echo "NPM_API_KEY=$NPM_API_KEY" >> $GITHUB_ENV
          echo "PYPI_API_KEY=$PYPI_API_KEY" >> $GITHUB_ENV
          echo "MAVEN_API_KEY=$MAVEN_API_KEY" >> $GITHUB_ENV
          echo "NUGET_API_KEY=$NUGET_API_KEY" >> $GITHUB_ENV
          echo "OCI_API_KEY=$OCI_API_KEY" >> $GITHUB_ENV
          
          echo "✅ Generated unique API keys for all services"

      - name: Deploy xRegistry Container App (All Services)
        run: |
          # Image URIs
          BRIDGE_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-bridge:${{ env.IMAGE_TAG }}"
          NPM_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-npm-bridge:${{ env.IMAGE_TAG }}"
          PYPI_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-pypi-bridge:${{ env.IMAGE_TAG }}"
          MAVEN_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-maven-bridge:${{ env.IMAGE_TAG }}"
          NUGET_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-nuget-bridge:${{ env.IMAGE_TAG }}"
          OCI_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-oci-bridge:${{ env.IMAGE_TAG }}"
          
          # Create downstreams configuration for bridge
          DOWNSTREAMS_JSON=$(cat << 'EOF'
          {
            "servers": [
              {
                "url": "http://localhost:4873",
                "apikey": "$NPM_API_KEY"
              },
              {
                "url": "http://localhost:3000",
                "apikey": "$PYPI_API_KEY"
              },
              {
                "url": "http://localhost:3300",
                "apikey": "$MAVEN_API_KEY"
              },
              {
                "url": "http://localhost:3200",
                "apikey": "$NUGET_API_KEY"
              },
              {
                "url": "http://localhost:8084",
                "apikey": "$OCI_API_KEY"
              }
            ]
          }
          EOF
          )
          
          # Substitute environment variables in downstreams JSON
          DOWNSTREAMS_JSON=$(echo "$DOWNSTREAMS_JSON" | envsubst)
          
          if az containerapp show --name $APP_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            echo "Updating Container App with all services..."
            
            # For updates, we'll replace all containers
            az containerapp update \
              --name $APP_NAME \
              --resource-group $RESOURCE_GROUP \
              --container-name bridge \
              --image "$BRIDGE_IMG" \
              --registry-server "${{ env.REGISTRY }}" \
              --registry-username "${{ github.actor }}" \
              --registry-password "${{ secrets.GITHUB_TOKEN }}"
          else
            echo "Creating Container App with all services..."
            
            # Get external FQDN placeholder for bridge baseurl
            APP_FQDN_PLACEHOLDER="xregistry-placeholder.domain"
            
            az containerapp create \
              --name $APP_NAME \
              --resource-group $RESOURCE_GROUP \
              --environment $ENV_NAME \
              --target-port 8092 \
              --ingress external \
              --registry-server "${{ env.REGISTRY }}" \
              --registry-username "${{ github.actor }}" \
              --registry-password "${{ secrets.GITHUB_TOKEN }}" \
              --cpu 2.0 \
              --memory 4Gi \
              --min-replicas 1 \
              --max-replicas 3 \
              --image "$BRIDGE_IMG" \
              --container-name bridge \
              --env-vars NODE_ENV=production \
                         PORT=8092 \
                         XREGISTRY_BRIDGE_PORT=8092 \
                         XREGISTRY_BRIDGE_BASEURL="https://$APP_FQDN_PLACEHOLDER" \
                         XREGISTRY_BRIDGE_QUIET=false \
                         DOWNSTREAMS_JSON="$DOWNSTREAMS_JSON"
          fi

      - name: Add NPM Registry Container
        run: |
          NPM_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-npm-bridge:${{ env.IMAGE_TAG }}"
          
          az containerapp container add \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --container-name npm \
            --image "$NPM_IMG" \
            --env-vars NODE_ENV=production \
                       PORT=4873 \
                       XREGISTRY_NPM_PORT=4873 \
                       XREGISTRY_NPM_BASEURL="http://localhost:4873" \
                       XREGISTRY_NPM_QUIET=false \
                       XREGISTRY_NPM_API_KEY="$NPM_API_KEY" || true

      - name: Add PyPI Registry Container
        run: |
          PYPI_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-pypi-bridge:${{ env.IMAGE_TAG }}"
          
          az containerapp container add \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --container-name pypi \
            --image "$PYPI_IMG" \
            --env-vars NODE_ENV=production \
                       PORT=3000 \
                       XREGISTRY_PYPI_PORT=3000 \
                       XREGISTRY_PYPI_BASEURL="http://localhost:3000" \
                       XREGISTRY_PYPI_QUIET=false \
                       XREGISTRY_PYPI_API_KEY="$PYPI_API_KEY" || true

      - name: Add Maven Registry Container
        run: |
          MAVEN_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-maven-bridge:${{ env.IMAGE_TAG }}"
          
          az containerapp container add \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --container-name maven \
            --image "$MAVEN_IMG" \
            --env-vars NODE_ENV=production \
                       PORT=3300 \
                       XREGISTRY_MAVEN_PORT=3300 \
                       XREGISTRY_MAVEN_BASEURL="http://localhost:3300" \
                       XREGISTRY_MAVEN_QUIET=false \
                       XREGISTRY_MAVEN_API_KEY="$MAVEN_API_KEY" || true

      - name: Add NuGet Registry Container
        run: |
          NUGET_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-nuget-bridge:${{ env.IMAGE_TAG }}"
          
          az containerapp container add \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --container-name nuget \
            --image "$NUGET_IMG" \
            --env-vars NODE_ENV=production \
                       PORT=3200 \
                       XREGISTRY_NUGET_PORT=3200 \
                       XREGISTRY_NUGET_BASEURL="http://localhost:3200" \
                       XREGISTRY_NUGET_QUIET=false \
                       XREGISTRY_NUGET_API_KEY="$NUGET_API_KEY" || true

      - name: Add OCI Registry Container
        run: |
          OCI_IMG="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-oci-bridge:${{ env.IMAGE_TAG }}"
          
          az containerapp container add \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --container-name oci \
            --image "$OCI_IMG" \
            --env-vars NODE_ENV=production \
                       PORT=8084 \
                       XREGISTRY_OCI_PORT=8084 \
                       XREGISTRY_OCI_BASEURL="http://localhost:8084" \
                       XREGISTRY_OCI_QUIET=false \
                       XREGISTRY_OCI_API_KEY="$OCI_API_KEY" || true

      - name: Update Bridge with Correct Base URL
        run: |
          # Get the actual FQDN now that the app is created
          APP_FQDN=$(az containerapp show --name $APP_NAME --resource-group $RESOURCE_GROUP --query 'properties.configuration.ingress.fqdn' -o tsv)
          
          # Create updated downstreams configuration
          DOWNSTREAMS_JSON=$(cat << 'EOF'
          {
            "servers": [
              {
                "url": "http://localhost:4873",
                "apikey": "$NPM_API_KEY"
              },
              {
                "url": "http://localhost:3000",
                "apikey": "$PYPI_API_KEY"
              },
              {
                "url": "http://localhost:3300",
                "apikey": "$MAVEN_API_KEY"
              },
              {
                "url": "http://localhost:3200",
                "apikey": "$NUGET_API_KEY"
              },
              {
                "url": "http://localhost:8084",
                "apikey": "$OCI_API_KEY"
              }
            ]
          }
          EOF
          )
          
          # Substitute environment variables in downstreams JSON
          DOWNSTREAMS_JSON=$(echo "$DOWNSTREAMS_JSON" | envsubst)
          
          # Update bridge container with correct base URL
          az containerapp container set \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --container-name bridge \
            --set-env-vars NODE_ENV=production \
                           PORT=8092 \
                           XREGISTRY_BRIDGE_PORT=8092 \
                           XREGISTRY_BRIDGE_BASEURL="https://$APP_FQDN" \
                           XREGISTRY_BRIDGE_QUIET=false \
                           DOWNSTREAMS_JSON="$DOWNSTREAMS_JSON"

      - name: Health Checks and URLs
        run: |
          echo "🎉 Deployment completed successfully!"
          echo ""
          echo "📍 Service Endpoints:"
          APP_FQDN=$(az containerapp show --name $APP_NAME --resource-group $RESOURCE_GROUP --query 'properties.configuration.ingress.fqdn' -o tsv)
          echo "🔗 xRegistry (Unified): https://$APP_FQDN"
          echo ""
          echo "📊 Container App Architecture:"
          echo "  • Bridge (External):   Port 8092 → https://$APP_FQDN"
          echo "  • NPM Registry:        Port 4873 → http://localhost:4873 (internal)"
          echo "  • PyPI Registry:       Port 3000 → http://localhost:3000 (internal)"
          echo "  • Maven Registry:      Port 3300 → http://localhost:3300 (internal)"
          echo "  • NuGet Registry:      Port 3200 → http://localhost:3200 (internal)"
          echo "  • OCI Registry:        Port 8084 → http://localhost:8084 (internal)"
          echo ""
          echo "🏥 Test the unified endpoint:"
          echo "curl https://$APP_FQDN/"
          echo "curl https://$APP_FQDN/model"
          echo "curl https://$APP_FQDN/capabilities"

      - name: Wait for Services and Test
        run: |
          APP_FQDN=$(az containerapp show --name $APP_NAME --resource-group $RESOURCE_GROUP --query 'properties.configuration.ingress.fqdn' -o tsv)
          BRIDGE_URL="https://$APP_FQDN"
          
          echo "Waiting for bridge service to be ready..."
          for i in {1..30}; do
            if curl -f -s "$BRIDGE_URL/" > /dev/null 2>&1; then
              echo "✅ Bridge service is responding!"
              break
            else
              echo "⏳ Waiting for bridge... (attempt $i/30)"
              sleep 10
            fi
          done
          
          echo "Testing unified API endpoints..."
          curl -f "$BRIDGE_URL/" || echo "❌ Root endpoint failed"
          curl -f "$BRIDGE_URL/model" || echo "❌ Model endpoint failed"
          curl -f "$BRIDGE_URL/capabilities" || echo "❌ Capabilities endpoint failed" 