name: Checkin Validation

on:
#  push:
#    branches: [ "main", "develop" ]
#    paths:
#      - 'bridge/**'
#      - 'npm/**'
#      - 'pypi/**'
#      - 'maven/**'
#      - 'nuget/**'
#      - 'oci/**'
#      - 'test/**'
#      - '*.Dockerfile'
#      - 'package.json'
#      - 'package-lock.json'
#      - '.github/workflows/checkin-validation.yml'
#   pull_request:
#    branches: [ "main", "develop" ]
#    paths:
#      - 'bridge/**'
#      - 'npm/**'
#      - 'pypi/**'
#      - 'maven/**'
#      - 'nuget/**'
#      - 'oci/**'
#      - 'test/**'
#      - '*.Dockerfile'
#      - 'package.json'
#      - 'package-lock.json'
#      - '.github/workflows/checkin-validation.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  
  # Unit and basic integration tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      #- name: Run unit tests
      #  run: npm run test:unit
      
      - name: Run basic integration tests
        run: npm run test:integration

  # Docker integration tests for individual services
  docker-integration-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: unit-tests
    
    strategy:
      matrix:
        service: [maven, nuget, pypi, oci, npm]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Run Docker integration tests for ${{ matrix.service }}
        run: ./test/run-docker-integration-tests.sh --service ${{ matrix.service }}
        timeout-minutes: 15
      
      - name: Cleanup Docker resources
        if: always()
        run: |
          # Clean up any remaining containers, images, and volumes
          docker container prune -f || true
          docker image prune -f || true
          docker volume prune -f || true

  # Bridge integration tests (full stack)
  bridge-integration-tests:
    name: Bridge Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Run Bridge integration tests
        run: ./test/run-bridge-integration-tests.sh --timeout 600
        timeout-minutes: 20
      
      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== Docker containers ==="
          docker ps -a || true
          echo "=== Docker images ==="
          docker images || true
          echo "=== Docker networks ==="
          docker network ls || true
          echo "=== Docker volumes ==="
          docker volume ls || true
      
      - name: Cleanup Docker resources
        if: always()
        run: |
          # Clean up any remaining containers, images, and volumes
          docker container prune -f || true
          docker image prune -f || true
          docker volume prune -f || true
          docker network prune -f || true

  # Security and code quality checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level moderate
      
      - name: Check for outdated packages
        run: npm outdated || true
      
      - name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: "*.Dockerfile"
          recursive: true
          failure-threshold: warning

  # Validate all checks passed
  checkin-validation-complete:
    name: Checkin Validation Complete
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-integration-tests, bridge-integration-tests, code-quality]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Job statuses:"
          echo "Unit tests: ${{ needs.unit-tests.result }}"
          echo "Docker integration tests: ${{ needs.docker-integration-tests.result }}"
          echo "Bridge integration tests: ${{ needs.bridge-integration-tests.result }}"
          echo "Code quality: ${{ needs.code-quality.result }}"
          
          if [[ "${{ needs.unit-tests.result }}" != "success" || 
                "${{ needs.docker-integration-tests.result }}" != "success" || 
                "${{ needs.bridge-integration-tests.result }}" != "success" || 
                "${{ needs.code-quality.result }}" != "success" ]]; then
            echo "❌ One or more validation checks failed"
            exit 1
          else
            echo "✅ All validation checks passed"
          fi
      
      - name: Post status comment (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.unit-tests.result }}' === 'success' &&
                          '${{ needs.docker-integration-tests.result }}' === 'success' &&
                          '${{ needs.bridge-integration-tests.result }}' === 'success' &&
                          '${{ needs.code-quality.result }}' === 'success';
            
            const emoji = status ? '✅' : '❌';
            const statusText = status ? 'All checks passed' : 'Some checks failed';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} **Checkin Validation**: ${statusText}\n\n` +
                    `- Unit & Integration Tests: ${{ needs.unit-tests.result }}\n` +
                    `- Docker Integration Tests: ${{ needs.docker-integration-tests.result }}\n` +
                    `- Bridge Integration Tests: ${{ needs.bridge-integration-tests.result }}\n` +
                    `- Code Quality & Security: ${{ needs.code-quality.result }}`
            }); 