name: Build and Deploy xRegistry Bridge for Package Registries

on:
  push:
    branches: [ "main" ]
    paths:   [ "pypi/**" ]
    tags:    [ "v*.*.*" ]
  workflow_dispatch:
    inputs:
      deploy:
        description: Deploy to Azure Container Apps after build
        default: false
        type: boolean
      resource_group:
        description: Azure Resource Group
        default: xregistry-resources
        type: string
      location:
        description: Azure Region
        default: westeurope
        type: string
      env_name:
        description: Container App Environment Name
        default: xregistry-env
        type: string
      app_name:
        description: Container App Name
        default: xregistry-pypi-bridge
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_REPO: ${{ github.repository }}

jobs:
# ───────────────────────────────────────────────────────── build ─────
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - uses: sigstore/cosign-installer@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=ref,event=branch
            type=ref,event=pr

      - id: build
        uses: docker/build-push-action@v5
        with:
          context: ./pypi
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          provenance: mode=max

      - name: Sign image (OIDC)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_YES: "true"
        run: |
          REF="${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}@${{ steps.build.outputs.digest }}"
          cosign sign "${REF}"

# ──────────────────────────────────────────────────────── verify ─────
  verify:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: read
      id-token: write

    steps:
      - uses: sigstore/cosign-installer@v3

      - name: Verify signature
        run: |
          REF="${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}@${{ needs.build.outputs.digest }}"
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/${{ github.workflow }}" \
            "${REF}"

# ─────────────────────────────────────────────────────── deploy ─────
  deploy:
    needs: [ build, verify ]
    if: ${{ github.event.inputs.deploy == 'true' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy]')) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write

    env:
      RESOURCE_GROUP: ${{ github.event.inputs.resource_group || 'xregistry-resources' }}
      LOCATION:       ${{ github.event.inputs.location       || 'westeurope' }}
      ENV_NAME:       ${{ github.event.inputs.env_name       || 'xregistry-env' }}
      APP_NAME:       ${{ github.event.inputs.app_name       || 'xregistry-pypi-bridge' }}

    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v1
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - run: az extension add --name containerapp --yes

      - id: tag
        run: |
          [[ "${{ github.ref }}" == refs/tags/v* ]] \
            && echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV \
            || echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      - name: Ensure Container App environment
        run: |
          if ! az containerapp env show --name $ENV_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            az containerapp env create \
              --name $ENV_NAME \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION
          fi

      - name: Deploy / update Container App
        run: |
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"
          if az containerapp show --name $APP_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            az containerapp update \
              --name $APP_NAME \
              --resource-group $RESOURCE_GROUP \
              --image "$IMG" \
              --registry-server "${{ env.REGISTRY }}" \
              --registry-username "${{ github.actor }}" \
              --registry-password "${{ secrets.GITHUB_TOKEN }}"
          else
            az containerapp create \
              --name $APP_NAME \
              --resource-group $RESOURCE_GROUP \
              --environment $ENV_NAME \
              --image "$IMG" \
              --target-port 3000 \
              --ingress external \
              --registry-server "${{ env.REGISTRY }}" \
              --registry-username "${{ github.actor }}" \
              --registry-password "${{ secrets.GITHUB_TOKEN }}" \
              --cpu 0.5 \
              --memory 1Gi \
              --min-replicas 0 \
              --max-replicas 2 \
              --env-vars NODE_ENV=production PORT=3000 \
                         XREGISTRY_PYPI_PORT=3000 \
                         XREGISTRY_PYPI_BASEURL="https://${APP_NAME}.$(az containerapp env show --name $ENV_NAME --resource-group $RESOURCE_GROUP --query 'properties.defaultDomain' -o tsv)" \
                         XREGISTRY_PYPI_QUIET=false
          fi

      - run: | 
          echo "Endpoint: https://$(az containerapp show --name $APP_NAME --resource-group $RESOURCE_GROUP --query 'properties.configuration.ingress.fqdn' -o tsv)"
