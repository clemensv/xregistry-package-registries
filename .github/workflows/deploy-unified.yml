name: Deploy Unified xRegistry to Azure Container Apps

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  IMAGE_NAME: xregistry-unified
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  CONTAINER_APP_NAME: ${{ secrets.AZURE_CONTAINER_APP_NAME }}
  CONTAINER_APP_ENVIRONMENT: ${{ secrets.AZURE_CONTAINER_APP_ENVIRONMENT }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Test Docker image
      run: |
        echo "Testing Docker image startup..."
        docker run --rm -d -p 3000:3000 --name test-container ${{ needs.build.outputs.image-tag }}
        
        # Wait for container to start
        timeout 60 bash -c 'until curl -f http://localhost:3000/; do sleep 2; done'
        
        # Test endpoints
        curl -f http://localhost:3000/ || exit 1
        curl -f http://localhost:3000/capabilities || exit 1
        curl -f http://localhost:3000/model || exit 1
        
        # Stop container
        docker stop test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Apps
      uses: azure/container-apps-deploy-action@v1
      with:
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        containerAppEnvironment: ${{ env.CONTAINER_APP_ENVIRONMENT }}
        targetPort: 3000
        ingress: external
        image: ${{ needs.build.outputs.image-tag }}
        environmentVariables: |
          XREGISTRY_PORT=3000
          XREGISTRY_ENABLE=pypi,npm,maven,nuget,oci
          XREGISTRY_QUIET=false
          NODE_ENV=production

    - name: Get Container App URL
      id: get-url
      run: |
        URL=$(az containerapp show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        echo "app-url=https://$URL" >> $GITHUB_OUTPUT
        echo "::notice title=Deployment Complete::Unified xRegistry deployed to https://$URL"

    - name: Health Check
      run: |
        echo "Performing health check..."
        timeout 300 bash -c 'until curl -f ${{ steps.get-url.outputs.app-url }}/; do sleep 10; done'
        
        echo "Testing all endpoints..."
        curl -f ${{ steps.get-url.outputs.app-url }}/ || exit 1
        curl -f ${{ steps.get-url.outputs.app-url }}/capabilities || exit 1
        curl -f ${{ steps.get-url.outputs.app-url }}/model || exit 1
        
        echo "âœ… All endpoints responding correctly"

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif' 