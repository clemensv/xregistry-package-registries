name: Build and Deploy NuGet xRegistry

on:
  push:
    branches: [ "main" ]
    paths:
      - 'nuget/**'
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to Azure Container Apps after build'
        required: false
        default: false
        type: boolean
      resource_group:
        description: 'Azure Resource Group'
        required: false
        default: 'xregistry-resources'
        type: string
      location:
        description: 'Azure Region'
        required: false
        default: 'westeurope'
        type: string
      env_name:
        description: 'Container App Environment Name'
        required: false
        default: 'xregistry-env'
        type: string
      app_name:
        description: 'Container App Name'
        required: false
        default: 'xregistry-nuget-bridge'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/xregistry-nuget-bridge

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for container signing

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./nuget
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  deploy:
    needs: build
    if: ${{ github.event.inputs.deploy == 'true' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy]')) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write  # Required for Azure login
      
    env:
      RESOURCE_GROUP: ${{ github.event.inputs.resource_group || 'xregistry-resources' }}
      LOCATION: ${{ github.event.inputs.location || 'westeurope' }}
      ENV_NAME: ${{ github.event.inputs.env_name || 'xregistry-env' }}
      APP_NAME: ${{ github.event.inputs.app_name || 'xregistry-nuget-bridge' }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure CLI extensions
        run: |
          az extension add --name containerapp --yes

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="latest"
          fi
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "Using image tag: $TAG"
      
      - name: Deploy to Azure Container Apps
        run: |
          # Check if Container App environment exists
          if ! az containerapp env show --name ${{ env.ENV_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating Container App environment '${{ env.ENV_NAME }}'..."
            az containerapp env create \
              --name ${{ env.ENV_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }}
          fi
          
          # Get the environment domain
          ENV_DOMAIN=$(az containerapp env show --name ${{ env.ENV_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.defaultDomain" -o tsv)
          BASEURL="https://${{ env.APP_NAME }}.$ENV_DOMAIN"
          
          # Check if app exists and deploy or update
          if az containerapp show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            echo "Updating existing Container App '${{ env.APP_NAME }}'..."
            az containerapp update \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
              --registry-server "${{ env.REGISTRY }}" \
              --registry-username "${{ github.actor }}" \
              --registry-password "${{ secrets.GITHUB_TOKEN }}"
          else
            echo "Creating new Container App '${{ env.APP_NAME }}'..."
            az containerapp create \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.ENV_NAME }} \
              --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
              --target-port 3200 \
              --ingress external \
              --registry-server "${{ env.REGISTRY }}" \
              --registry-username "${{ github.actor }}" \
              --registry-password "${{ secrets.GITHUB_TOKEN }}" \
              --cpu 0.5 \
              --memory "1Gi" \
              --min-replicas 0 \
              --max-replicas 2 \
              --env-vars "NODE_ENV=production" "PORT=3200" "XREGISTRY_NUGET_PORT=3200" "XREGISTRY_NUGET_BASEURL=$BASEURL" "XREGISTRY_NUGET_QUIET=false"
          fi
          
          # Get the FQDN
          FQDN=$(az containerapp show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "Deployment successful! Your xRegistry service is now available at:"
          echo "https://$FQDN"
      
      - name: Azure logout
        run: az logout 